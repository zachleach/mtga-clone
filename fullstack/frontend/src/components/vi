/* components/Card.jsx */

/* event listeners in this component */
/* you'd need uuid for the card itself to report events */
/* does the card itself need the websocket to report events then ? */
/* then the stack would need it as well for stack related events */
/* then you have prop drilling */
/* you'd need this anyways for tapping */

export const Card = ({ art_url, aspect_ratio = 745 / 1040, outline, uuid }) => {

  const container_style = {
    height: '100%',
    aspectRatio: aspect_ratio,
    overflow: 'hidden',
    background: 'black',
    border: '2px solid black',
    borderRadius: '8px',
		outline: `${outline}`
  }

  const img_style = {
    width: '100%',
    height: '100%',
    display: 'block',
  }

  return (
    <div style={container_style}>
      <img 
        src={art_url} 
        alt="Card.jsx failed to load img element" 
        style={img_style}
      />
    </div>
  )
}

/* components/Row.jsx */
import { Stack } from '.'

export const Row = ({ row_state }) => {

  const container_style = {
    height: '100%',
    background: 'white',
    border: '1px solid green',
    boxSizing: 'border-box',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    flex: '1 1 50%', 
    overflow: 'hidden'
  }

  return (
    <div style={container_style} >
			{row_state['stacks'].map((stack, idx) => (
				<Stack key={idx} stack_state={stack} is_hand={row_state.is_hand}/>
			))}
    </div>
  )
}

/* components/Stack.jsx */
import { useState, useRef, useEffect } from 'react'
import { Card } from '.'

const TILE_ASPECT_RATIO = 626 / 457
const CARD_ASPECT_RATIO = 745 / 1040

export const Stack = ({ stack_state, is_hand = false }) => {

	const container_style = {
      position: 'relative',
      height: is_hand === true ? '100%' : '40%',
      aspectRatio: is_hand === true ? CARD_ASPECT_RATIO : TILE_ASPECT_RATIO,
      minWidth: 0,
	}

  const get_position_styling = (index) => {
    const total_cards = stack_state.card_arr.length
    const MAX_STACK_HEIGHT = 150
    const stack_spacing = Math.min(25, MAX_STACK_HEIGHT / total_cards)
    const total_stack_height = (total_cards - 1) * stack_spacing
    const start_offset = -(total_stack_height / 2)

    return {
      position: 'absolute',
      height: '100%',
      width: '100%',
      top: `calc(50% + ${start_offset + (index * stack_spacing)}%)`,
      transform: 'translateY(-50%)', 
      zIndex: index,
    }
  }

  return (
    <div style={container_style}>
      {stack_state.card_arr.map((card, index) => (

        <div key={index} style={get_position_styling(index)}>
          <Card 
						uuid={card.uuid}
						art_url={is_hand === true ? card.card : card.crop} 
						aspect_ratio={is_hand === true ? CARD_ASPECT_RATIO : TILE_ASPECT_RATIO} 
					/>
        </div>

      ))}
    </div>
  )
}
