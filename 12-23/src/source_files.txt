/* components/Hand.jsx */
import { Row, Hand } from '.'

const Board = ({ opp = false }) => {
  const container_style = {
    display: 'flex',
    height: '100%',
    width: '100%',
    flexDirection: 'column',
    minWidth: 0,  
    alignItems: 'center',
    justifyContent: 'flex-start',
  }

  return (
		<div style={{ display: 'flex', flex: '1 1 100%', flexDirection: 'column', width: '100%' }}>
			<Row />
			<div style={{ display: 'flex', flex: '1 1 100%', flexDirection: 'row' }}>
				<Row />
				<Row />
			</div>
		</div>
  )
}


export default Board
/* components/Card.jsx */
const Card = ({ img_path, container_height }) => {

  /* Calculate height as percentage of container */
  const height_percentage = 0.95 /* 95% of container height */
  const calculated_height = container_height * height_percentage
  const ASPECT_RATIO = 745 / 1040

  const card_style = {
    height: `${calculated_height}px`,
    width: `${calculated_height * ASPECT_RATIO}px`,
    overflow: 'hidden',
    background: 'black',
    border: '2px solid black',
    borderRadius: '8px',
  }

  const img_style = {
    width: '100%',
    height: '100%',
    display: 'block',
  }

  return (
    <div style={card_style}>
      <img 
        src={img_path} 
        alt="Card" 
        style={img_style}
      />
    </div>
  )
}

export default Card
/* components/Hand.jsx */
import { useState, useRef, useEffect } from 'react'
import { Card } from '.'

const Hand = () => {
  const [card_arr, set_card_arr] = useState([ 
    { img_path: '/src/assets/mh3_101_Mindless_Conscription.png' },
    { img_path: '/src/assets/mh3_104_Quest_for_the_Necropolis.png' },
    { img_path: '/src/assets/mh3_105_Refurbished_Familiar.png' },
    { img_path: '/src/assets/mh3_106_Retrofitted_Transmogrant.png' },
    { img_path: '/src/assets/mh3_108_Scurrilous_Sentry.png' },
    { img_path: '/src/assets/mh3_111_Wither_and_Bloom.png' },
    { img_path: '/src/assets/mh3_112_Wurmcoil_Larva.png' },
  ])
  
  /* Add container height state and ref */
  const [container_height, set_container_height] = useState(0)
  const container_ref = useRef(null)

  /* Measure container height on mount and resize */
  useEffect(() => {
    const update_height = () => {
      if (container_ref.current) {
        set_container_height(container_ref.current.clientHeight)
      }
    }

    /* Initial measurement */
    update_height()

    /* Add resize listener */
    window.addEventListener('resize', update_height)

    /* Cleanup */
    return () => window.removeEventListener('resize', update_height)
  }, [])
  
  const container_style = {
    height: '100%',
    width: '100%',
    background: 'grey',
    border: '1px solid black',
    position: 'relative',
    alignItems: 'center',
    justifyContent: 'center',
  }

  const get_card_style = (index, total_cards) => {
    const base_height = '100%'
    const aspect_ratio = 745 / 1040
    const card_width = parseInt(base_height) * aspect_ratio
    
    const position = index - (total_cards - 1) / 2
    
    const rotation_multiplier = 4
    const rotation = rotation_multiplier * position
    
    const hand_density = 150
    const hand_density_multiplier = 1
    
    const lower_by = 0.8 * card_width
    const vertical_offset = (Math.pow(position, 2) * rotation_multiplier) + lower_by

    return {
      position: 'absolute',
      height: base_height,
      aspectRatio: aspect_ratio.toString(),
      transform: `rotate(${rotation}deg) translateY(${vertical_offset}px)`,
      transformOrigin: 'bottom center',
      left: `calc(50% - ${card_width / 2}px + ${position * (hand_density / hand_density_multiplier)}px)`,
      backgroundColor: 'transparent',
      zIndex: index,
    }
  }

  const html5_dnd_attributes = (index) => ({
    draggable: true,
    onDragStart: null,
    onDrop: null,
    onDragOver: null
  })

  const container_dnd_attributes = {
    onDrop: null,
    onDragOver: null
  }

  return (
    <div ref={container_ref} style={container_style} {...container_dnd_attributes}>
      {card_arr.map((card, index) => (
        <div key={index} style={get_card_style(index, card_arr.length)} {...html5_dnd_attributes(index)}>
          <Card {...card} container_height={container_height} />
        </div>
      ))}
    </div>
  )
}

export default Hand
import { Row } from '.'

const OpponentBoard = () => {
  return (
    <div style={{ display: 'flex', flex: '0 0 33.33%', flexDirection: 'column', border: '1pt solid red' }}>
      {/* Non-Creatures */}
      <div style={{ display: 'flex', flex: '0 0 40%', flexDirection: 'row', minHeight: '30%' }}>
        <Row />
        <Row />
      </div>

      {/* Creatures */}
      <div style={{ display: 'flex', flex: '0 0 60%', minHeight: '50%' }}>
        <Row />
      </div>
    </div>
  )
}

export default OpponentBoard
import { Row } from '.'

const PlayerBoard = () => {
  return (
    <div style={{ display: 'flex', flex: '0 0 70%', flexDirection: 'column', border: '1pt solid red', overflow: 'hidden' }}>
      {/* Creatures */}
      <div style={{ display: 'flex', flex: '0 0 50%', minHeight: '50%' }}>
        <Row />
      </div>

      {/* Non-Creatures */}
      <div style={{ display: 'flex', flex: '0 0 30%', flexDirection: 'row', minHeight: '30%' }}>
        <Row />
        <Row />
      </div>

      {/* Hand */}
      <div style={{ display: 'flex', flex: '0 0 20%', flexDirection: 'column', border: '1pt solid yellow', minHeight: '20%' }}>
        Hand
      </div>
    </div>
  )
}

export default PlayerBoard
/* components/Row.jsx */

import { useState } from 'react'
import { Stack, Hand } from '.'


const Row = () => {
  const [stack_ids, set_stack_ids] = useState(['0', '1', '2'])

  const container_style = {
    height: '100%',
    width: '100%',
    background: 'white',
    border: '1px solid green',
    boxSizing: 'border-box',

    display: 'flex',
    alignItems: 'center',
    justifyContent: 'flex-start',
		flex: '1 1 100%',
		overflow: 'hidden'
  }

  const html5_dnd_attributes = (index) => ({
    draggable: true,
    onDragStart: null,
    onDrop: null,
    onDragOver: null
  })

  return (
    <div style={container_style} {...html5_dnd_attributes}>
      {stack_ids.map(id => (
        <Stack key={id} stack_id={id} />
      ))}
    </div>
  )
}


export default Row
import { useState, useRef, useEffect } from 'react'
import { Tile } from '.'

const Stack = ({ stack_id, is_hand = false }) => {
  const [card_arr, set_card_arr] = useState([
    { img_path: '/src/assets/artcrop.png' },
    { img_path: '/src/assets/artcrop.png' },
    { img_path: '/src/assets/artcrop.png' },
    { img_path: '/src/assets/artcrop.png' },
    { img_path: '/src/assets/artcrop.png' },
    { img_path: '/src/assets/artcrop.png' },
    { img_path: '/src/assets/artcrop.png' },
    { img_path: '/src/assets/artcrop.png' },
    { img_path: '/src/assets/artcrop.png' },
    { img_path: '/src/assets/artcrop.png' },
    { img_path: '/src/assets/artcrop.png' },
    { img_path: '/src/assets/artcrop.png' },
    { img_path: '/src/assets/artcrop.png' },
    { img_path: '/src/assets/artcrop.png' },
    { img_path: '/src/assets/artcrop.png' },
    { img_path: '/src/assets/artcrop.png' },
  ])
  
  const ASPECT_RATIO = 626 / 457
  const stack_container_styling = {
    position: 'relative',
    height: '50%',  
    aspectRatio: `${ASPECT_RATIO}`,
    minWidth: 0,          
  }

  const get_position_styling = (index) => {
    const total_cards = card_arr.length
    // Maximum desired stack height as percentage of container
    const MAX_STACK_HEIGHT = 100
    // Calculate dynamic spacing that ensures total height stays within MAX_STACK_HEIGHT
    const stack_spacing = Math.min(25, MAX_STACK_HEIGHT / total_cards)
    const total_stack_height = (total_cards - 1) * stack_spacing
    const start_offset = -(total_stack_height / 2)

    return {
      position: 'absolute',
      height: '100%',
      width: '100%',
      top: `calc(50% + ${start_offset + (index * stack_spacing)}%)`,
      transform: 'translateY(-50%)', 
      zIndex: index,
    }
  }

  const html5_dnd_attributes = (index) => ({
    draggable: true,
    onDragStart: (e) => on_drag_start(e),
    onDrop: (e) => on_drop(e),
    onDragOver: (e) => on_drag_over(e)
  })

  const on_drag_start = (e, index) => {}
  const on_drag_end = (e, index) => {}
  const on_drop = (e, index) => {}
  const on_drag_over = (e, index) => {}

  return (
    <div style={stack_container_styling}>
      {card_arr.map((card, index) => (
        <div key={index} style={get_position_styling(index)} {...html5_dnd_attributes(index)}>
          <Tile {...card} />
        </div>
      ))}
    </div>
  )
}

export default Stack
/* components/Tile.jsx */
const Tile = ({ img_path, container_height }) => {
  const ASPECT_RATIO = 626 / 457

  const card_style = {
    height: '100%',
		aspectRatio: `${ASPECT_RATIO}`,
    overflow: 'hidden',
    background: 'black',
    border: '2px solid black',
    borderRadius: '8px',
  }

  const img_style = {
    width: '100%',
    height: '100%',
    display: 'block',
  }

  return (
    <div style={card_style}>
      <img 
        src={img_path} 
        alt="Tile" 
        style={img_style}
      />
    </div>
  )
}

export default Tile
export { default as Tile } from './Tile'
export { default as Card } from './Card'
export { default as Hand } from './Hand'
export { default as Stack } from './Stack'
export { default as Row } from './Row'
export { default as Board } from './Board'
export { default as OpponentBoard } from './OpponentBoard'
export { default as PlayerBoard } from './PlayerBoard'
import './App.css'
import { OpponentBoard, PlayerBoard } from './components'

const App = () => {
  return (
    <div style={{ height: '100vh', display: 'flex', flexDirection: 'column' }}>
      {/* Opponents Section - 30% height */}
      <div style={{ display: 'flex', flex: '0 0 30%', flexDirection: 'column', border: '1pt solid yellow', overflow: 'hidden' }}>
        <div style={{ display: 'flex', flex: '0 0 100%', flexDirection: 'row', overflow: 'hidden' }}>
          <OpponentBoard />
          <OpponentBoard />
          <OpponentBoard />
        </div>
      </div>

      {/* Player's Board - 70% height */}
      <PlayerBoard />
    </div>
  )
}

export default App
